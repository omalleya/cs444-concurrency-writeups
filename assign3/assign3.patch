From 67e8554c6e400cb582486fe8c9141b15576443b0 Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Sat, 11 Nov 2017 14:49:47 -0800
Subject: [PATCH 1/8] creates simple block driver file in drivers/blocks/ and
 creates file skeleton

---
 drivers/block/sbd.c | 51 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)
 create mode 100644 drivers/block/sbd.c

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
new file mode 100644
index 0000000..d233e7c
--- /dev/null
+++ b/drivers/block/sbd.c
@@ -0,0 +1,51 @@
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/errno.h>
+#include <linux/types.h>
+#include <linux/vmalloc.h>
+#include <linux/genhd.h>
+#include <linux/blkdev.h>
+#include <linux/hdreg.h>
+#include <linux/crypto.h>
+
+static struct request_queue *Queue;
+
+static struct sbd_device {
+
+} Device;
+
+static void sbd_transfer()
+{
+
+}
+
+static void sbd_request()
+{
+
+}
+
+int sbd_ioctl()
+{
+
+}
+
+static struct block_device_operations sbd_ops = {
+
+};
+
+static int __init sbd_init()
+{
+
+}
+
+static void __exit sbd_exit()
+{
+
+}
+
+module_init(sbd_init);
+module_exit(sbd_exit);
+
-- 
1.8.3.1


From a310be6ef0dd5e39fc01c53fa17edff8260f0210 Mon Sep 17 00:00:00 2001
From: William Sims <simsw@os2.engr.oregonstate.edu>
Date: Sat, 11 Nov 2017 15:23:01 -0800
Subject: [PATCH 2/8] adds simple block driver structure without encryption

---
 drivers/block/sbd.c | 111 +++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 101 insertions(+), 10 deletions(-)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index d233e7c..357cede 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -11,39 +11,130 @@
 #include <linux/hdreg.h>
 #include <linux/crypto.h>
 
+/*
+ * Reference for block driver: http://blog.superpat.com/2010/05/04/a-simple-block-driver-for-linux-kernel-2-6-31/
+ * 
+ */ 
+
+static int major_num = 0;
+module_param(major_num, int, 0);
+static int logical_block_size = 512;
+module_param(logical_block_size, int, 0);
+static int nsectors = 1024; 
+module_param(nsectors, int, 0);
+
 static struct request_queue *Queue;
 
 static struct sbd_device {
-
+	unsigned long size;
+	spinlock_t lock;
+	u8 *data;
+	struct gendisk *gd;
 } Device;
 
-static void sbd_transfer()
+static void sbd_transfer(struct sbd_device *dev, sector_t sector,
+		unsigned long nsect, char *buffer, int write)
 {
-
+unsigned long offset = sector * logical_block_size;
+	unsigned long nbytes = nsect * logical_block_size;
+
+	if ((offset + nbytes) > dev->size) {
+		printk (KERN_NOTICE "sbd: Beyond-end write (%ld %ld)\n", offset, nbytes);
+		return;
+	}
+	if (write)
+		memcpy(dev->data + offset, buffer, nbytes);
+	else
+		memcpy(buffer, dev->data + offset, nbytes);
 }
 
-static void sbd_request()
+static void sbd_request(struct request_queue *q)
 {
-
+	struct request *req;
+
+	req = blk_fetch_request(q);
+	while (req != NULL) {
+		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
+			printk (KERN_NOTICE "Skip non-CMD request\n");
+			__blk_end_request_all(req, -EIO);
+			continue;
+		}
+		sbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
+				req->buffer, rq_data_dir(req));
+		if ( ! __blk_end_request_cur(req, 0) ) {
+			req = blk_fetch_request(q);
+		}
+	}
 }
 
-int sbd_ioctl()
+int sbd_ioctl(struct block_device * block_device, struct hd_geometry * geo)
 {
-
+	long size;
+
+	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	geo->cylinders = (size & ~0x3f) >> 6;
+	geo->heads = 4;
+	geo->sectors = 16;
+	geo->start = 0;
+	return 0;
 }
 
 static struct block_device_operations sbd_ops = {
-
+	.owner  = THIS_MODULE,
+	.getgeo = sbd_getgeo
 };
 
 static int __init sbd_init()
 {
-
+ 	//Set up our internal device
+	Device.size = nsectors * logical_block_size;
+	spin_lock_init(&Device.lock);
+	Device.data = vmalloc(Device.size);
+	if (Device.data == NULL)
+		return -ENOMEM;
+	
+  	//Get a request queue
+	Queue = blk_init_queue(sbd_request, &Device.lock);
+	if (Queue == NULL)
+		goto out;
+	blk_queue_logical_block_size(Queue, logical_block_size);
+
+  	 //Get registered
+	major_num = register_blkdev(major_num, "sbd");
+	if (major_num < 0) {
+		printk(KERN_WARNING "sbd: unable to get major number\n");
+		goto out;
+	}
+	
+	//Gendisk structure
+	Device.gd = alloc_disk(16);
+	if (!Device.gd)
+		goto out_unregister;
+	Device.gd->major = major_num;
+	Device.gd->first_minor = 0;
+	Device.gd->fops = &sbd_ops;
+	Device.gd->private_data = &Device;
+	strcpy(Device.gd->disk_name, "sbd0");
+	set_capacity(Device.gd, nsectors);
+	Device.gd->queue = Queue;
+	add_disk(Device.gd);
+
+	return 0;
+
+out_unregister:
+	unregister_blkdev(major_num, "sbd");
+out:
+	vfree(Device.data);
+	return -ENOMEM;
 }
 
 static void __exit sbd_exit()
 {
-
+	del_gendisk(Device.gd);
+	put_disk(Device.gd);
+	unregister_blkdev(major_num, "sbd");
+	blk_cleanup_queue(Queue);
+	vfree(Device.data);
 }
 
 module_init(sbd_init);
-- 
1.8.3.1


From 85f0afa78e7c4a8c2f6a1cba496af4659fd83868 Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Sat, 11 Nov 2017 15:31:42 -0800
Subject: [PATCH 3/8] adds cipher initialization with key set up as well

---
 drivers/block/sbd.c | 20 +++++++++++++++++++-
 1 file changed, 19 insertions(+), 1 deletion(-)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index 357cede..f72145b 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -23,6 +23,8 @@ module_param(logical_block_size, int, 0);
 static int nsectors = 1024; 
 module_param(nsectors, int, 0);
 
+#define KEY_SIZE 32
+
 static struct request_queue *Queue;
 
 static struct sbd_device {
@@ -30,12 +32,16 @@ static struct sbd_device {
 	spinlock_t lock;
 	u8 *data;
 	struct gendisk *gd;
+	//aes block cipher
+	struct crypto_cipher *block_cipher;
+	//key used for encrypt/decrypt
+	u8 key[KEY_SIZE];
 } Device;
 
 static void sbd_transfer(struct sbd_device *dev, sector_t sector,
 		unsigned long nsect, char *buffer, int write)
 {
-unsigned long offset = sector * logical_block_size;
+	unsigned long offset = sector * logical_block_size;
 	unsigned long nbytes = nsect * logical_block_size;
 
 	if ((offset + nbytes) > dev->size) {
@@ -92,6 +98,16 @@ static int __init sbd_init()
 	Device.data = vmalloc(Device.size);
 	if (Device.data == NULL)
 		return -ENOMEM;
+
+	//Set up block cipher
+	Device->block_cipher = crypto_alloc_cipher("aes", 0, CRYPTO_ALG_ASYNC);
+	//Set up key for block cipher
+	int temp = crypto_cipher_setkey(Device->block_cipher, key, KEY_SIZE);
+	if(temp != 0)
+	{
+		printk("Failed to set key");
+		goto out;
+	}
 	
   	//Get a request queue
 	Queue = blk_init_queue(sbd_request, &Device.lock);
@@ -135,6 +151,8 @@ static void __exit sbd_exit()
 	unregister_blkdev(major_num, "sbd");
 	blk_cleanup_queue(Queue);
 	vfree(Device.data);
+	//free block cipher
+	crypto_free_cipher(Device->block_cipher);
 }
 
 module_init(sbd_init);
-- 
1.8.3.1


From a78a861183eb7fc0d0540e0c489e13cf4bfd2a6e Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Sat, 11 Nov 2017 15:54:08 -0800
Subject: [PATCH 4/8] encrypts and decrypts data in transfer function

---
 drivers/block/sbd.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index f72145b..76e042c 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -44,14 +44,28 @@ static void sbd_transfer(struct sbd_device *dev, sector_t sector,
 	unsigned long offset = sector * logical_block_size;
 	unsigned long nbytes = nsect * logical_block_size;
 
+	u8 *cur_data = dev->data + offset;
+	int i =0;
+
 	if ((offset + nbytes) > dev->size) {
 		printk (KERN_NOTICE "sbd: Beyond-end write (%ld %ld)\n", offset, nbytes);
 		return;
 	}
 	if (write)
-		memcpy(dev->data + offset, buffer, nbytes);
+	{
+		//cycle through bytes and encrypt one at a time
+		for(i=0; i<nbytes; i+=crypto_cipher_blocksize(dev->block_cipher))
+		{
+			crypto_cipher_encrypt_one(dev->block_cipher, &cur_data[i], &buffer[i]);
+		}
+	}
 	else
-		memcpy(buffer, dev->data + offset, nbytes);
+	{
+		for(i=0; i<nbytes; i+=crypto_cipher_blocksize(dev->block_cipher))
+		{
+			crypto_cipher_decrypt_one(dev->block_cipher, &buffer[i], &cur_data[i]);
+		}
+	}
 }
 
 static void sbd_request(struct request_queue *q)
-- 
1.8.3.1


From 041df9cabd16e0db54f1e695b7646d35b1354c79 Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Sat, 11 Nov 2017 15:58:29 -0800
Subject: [PATCH 5/8] adds key as module parameter

---
 drivers/block/sbd.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index 76e042c..ad91c14 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -22,6 +22,8 @@ static int logical_block_size = 512;
 module_param(logical_block_size, int, 0);
 static int nsectors = 1024; 
 module_param(nsectors, int, 0);
+static char *key = "tempkey";
+module_param(key, charp, 0);
 
 #define KEY_SIZE 32
 
-- 
1.8.3.1


From fc01bd1245f73de1126d03d3fb4a28f54263ecd1 Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Sat, 11 Nov 2017 15:59:25 -0800
Subject: [PATCH 6/8] removes key from device structure since it is a global
 variable

---
 drivers/block/sbd.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index ad91c14..b8e04e0 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -36,8 +36,6 @@ static struct sbd_device {
 	struct gendisk *gd;
 	//aes block cipher
 	struct crypto_cipher *block_cipher;
-	//key used for encrypt/decrypt
-	u8 key[KEY_SIZE];
 } Device;
 
 static void sbd_transfer(struct sbd_device *dev, sector_t sector,
-- 
1.8.3.1


From 07e987ab34910de4990e81b1eaf0456ee2066adf Mon Sep 17 00:00:00 2001
From: William Sims <simsw@os2.engr.oregonstate.edu>
Date: Sat, 11 Nov 2017 16:13:31 -0800
Subject: [PATCH 7/8] updated Kconfig and Makefile

---
 drivers/block/Kconfig  | 5 +++++
 drivers/block/Makefile | 2 ++
 2 files changed, 7 insertions(+)

diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index 014a1cf..4c1c195 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -557,4 +557,9 @@ config BLK_DEV_RSXX
 	  To compile this driver as a module, choose M here: the
 	  module will be called rsxx.
 
+config SIMPLE_BLK
+	tristate "Encrypted Block Device"
+	help
+	  Simple encrypted block device for 3.19. 
+
 endif # BLK_DEV
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index 02b688d..ac80a4c 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -44,6 +44,8 @@ obj-$(CONFIG_BLK_DEV_RSXX) += rsxx/
 obj-$(CONFIG_BLK_DEV_NULL_BLK)	+= null_blk.o
 obj-$(CONFIG_ZRAM) += zram/
 
+obj-$(CONFIG_SIMPLE_BLK) 	+= sbd.o
+
 nvme-y		:= nvme-core.o nvme-scsi.o
 skd-y		:= skd_main.o
 swim_mod-y	:= swim.o swim_asm.o
-- 
1.8.3.1


From a7ca4e8de175540eb76f24bcbfbc076335940d9c Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Mon, 13 Nov 2017 10:09:39 -0800
Subject: [PATCH 8/8] smaller changes to sbd.c to get module to work inside of
 VM

---
 drivers/block/sbd.c | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/drivers/block/sbd.c b/drivers/block/sbd.c
index b8e04e0..5c6df76 100644
--- a/drivers/block/sbd.c
+++ b/drivers/block/sbd.c
@@ -80,7 +80,7 @@ static void sbd_request(struct request_queue *q)
 			continue;
 		}
 		sbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
-				req->buffer, rq_data_dir(req));
+				bio_data(req->bio), rq_data_dir(req));
 		if ( ! __blk_end_request_cur(req, 0) ) {
 			req = blk_fetch_request(q);
 		}
@@ -91,7 +91,7 @@ int sbd_ioctl(struct block_device * block_device, struct hd_geometry * geo)
 {
 	long size;
 
-	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	size = Device.size * (logical_block_size / 512);
 	geo->cylinders = (size & ~0x3f) >> 6;
 	geo->heads = 4;
 	geo->sectors = 16;
@@ -101,10 +101,10 @@ int sbd_ioctl(struct block_device * block_device, struct hd_geometry * geo)
 
 static struct block_device_operations sbd_ops = {
 	.owner  = THIS_MODULE,
-	.getgeo = sbd_getgeo
+	.getgeo = sbd_ioctl
 };
 
-static int __init sbd_init()
+static int __init sbd_init(void)
 {
  	//Set up our internal device
 	Device.size = nsectors * logical_block_size;
@@ -114,10 +114,9 @@ static int __init sbd_init()
 		return -ENOMEM;
 
 	//Set up block cipher
-	Device->block_cipher = crypto_alloc_cipher("aes", 0, CRYPTO_ALG_ASYNC);
+	Device.block_cipher = crypto_alloc_cipher("aes", 0, CRYPTO_ALG_ASYNC);
 	//Set up key for block cipher
-	int temp = crypto_cipher_setkey(Device->block_cipher, key, KEY_SIZE);
-	if(temp != 0)
+	if(crypto_cipher_setkey(Device.block_cipher, key, KEY_SIZE) != 0)
 	{
 		printk("Failed to set key");
 		goto out;
@@ -158,7 +157,7 @@ out:
 	return -ENOMEM;
 }
 
-static void __exit sbd_exit()
+static void __exit sbd_exit(void)
 {
 	del_gendisk(Device.gd);
 	put_disk(Device.gd);
@@ -166,9 +165,13 @@ static void __exit sbd_exit()
 	blk_cleanup_queue(Queue);
 	vfree(Device.data);
 	//free block cipher
-	crypto_free_cipher(Device->block_cipher);
+	crypto_free_cipher(Device.block_cipher);
 }
 
 module_init(sbd_init);
 module_exit(sbd_exit);
 
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Simple block driver with encryption");
+MODULE_AUTHOR("Aidan O'Malley and Will Sims");
+
-- 
1.8.3.1

