From eca76eb981e2eda8962121a4d87531dd3ae1a7bf Mon Sep 17 00:00:00 2001
From: omalleya <omalleya@oregonstate.edu>
Date: Mon, 30 Oct 2017 16:39:20 -0700
Subject: [PATCH] patch attempt

---
 block/Kconfig.iosched |  10 +++
 block/Makefile        |   1 +
 block/sstf-iosched.c  | 185 ++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 196 insertions(+)
 create mode 100644 block/sstf-iosched.c

diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..1d8e61e 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -12,6 +12,12 @@ config IOSCHED_NOOP
 	  that do their own scheduling and require only minimal assistance from
 	  the kernel.
 
+config IOSCHED_CLOOK
+	tristate "CLOOK I/O scheduler"
+	default y
+	---help---
+	  The CLOOK I/O scheduler is a scheduler that uses an elevator algorithmn to service requests. The scheduler sweeps from either inside or outside and when the edge of the disk is reached, the head jumps to the other end and services requests in the same direction.
+
 config IOSCHED_DEADLINE
 	tristate "Deadline I/O scheduler"
 	default y
@@ -54,6 +60,9 @@ choice
 
 	config DEFAULT_NOOP
 		bool "No-op"
+	
+	config DEFAULT_CLOOK
+		bool "CLOOK" if IOSCHED_CLOOK=y
 
 endchoice
 
@@ -62,6 +71,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "clook" if DEFAULT_CLOOK
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 00ecc97..139076a 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
 obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
+obj-$(CONFIG_IOSCHED_CLOOK)	+= sstf-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..0478ab2
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,185 @@
+/*
+ * elevator clook
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+sector_t dhead;
+
+struct clook_data {
+	struct list_head queue;
+};
+
+void print_clook_queue(struct clook_data *cd)
+{
+	struct list_head *head;
+	printk("[CLOOK QUEUE] ");
+	list_for_each(head, &cd->queue)
+	{
+		struct request* curr = list_entry(head, struct request, queuelist);
+		sector_t curr_sector = blk_rq_pos(curr);
+
+		printk("%lu ", (unsigned long) curr_sector);
+	}
+	printk("\n");
+}
+
+static void clook_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int clook_dispatch(struct request_queue *q, int force)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		printk("[CLOOK] dsp %c %lu\n", rq_data_dir(rq), blk_rq_pos(rq));
+		dhead = blk_rq_pos(rq);
+		elv_dispatch_sort(q, rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void clook_add_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	sector_t rq_pos = blk_rq_pos(rq);
+	struct list_head *head;
+	int temp = 0;
+
+	// if list is empty, just add request
+	if(list_empty(&nd->queue)) {
+		list_add(&rq->queuelist, &nd->queue);
+	} else {
+		list_for_each(head, &nd->queue)
+		{
+			struct request* curr = list_entry(head, struct request, queuelist);
+			sector_t curr_sector = blk_rq_pos(curr);
+		
+			/* if the request position is less than the current disk head 
+			// and the head's position is less than the disk head 
+			// and the request position is less than the head's position
+			// then we add the request to the tail of head's current spot	
+			*/
+			if(rq_pos < dhead && curr_sector < dhead && rq_pos < curr_sector)
+			{
+				temp = 1;
+				break;
+			}
+		       	/* if the request position is greater than the disk head
+			// and either the head's position is less than the disk head
+			// or the request position is less than the head's position
+			// then we add the request to the tail of head's current spot	
+			*/
+			else if(rq_pos >= dhead && (curr_sector < dhead || rq_pos < curr_sector))
+			{
+				temp = 1;
+				break;
+			}
+			// if neither of the above conditions are met for the length of the queue
+			// add request to tail because it is larger than all requests in queue
+		}
+		if(list_empty(head->next) && temp == 0)
+		{
+			list_add(&rq->queuelist, head);
+		} else {
+			list_add_tail(&rq->queuelist, head);
+		}
+	}
+	print_clook_queue(nd);
+}
+
+static struct request *
+clook_former_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+clook_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int clook_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct clook_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void clook_exit_queue(struct elevator_queue *e)
+{
+	struct clook_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_clook = {
+	.ops = {
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
+	},
+	.elevator_name = "clook",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init clook_init(void)
+{
+	return elv_register(&elevator_clook);
+}
+
+static void __exit clook_exit(void)
+{
+	elv_unregister(&elevator_clook);
+}
+
+module_init(clook_init);
+module_exit(clook_exit);
+
+
+MODULE_AUTHOR("Group 19");
+MODULE_LICENSE("");
+MODULE_DESCRIPTION("C-look IO scheduler");
-- 
1.8.3.1

